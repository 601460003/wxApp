
                $emit（用于子父之间的通信）
**ref=“引用事件的所有方法” Vue中的面向对象$refs 英文单词reference引用的意思，也可以引用组件！

                                 1.什么是vue生命周期？
答： Vue 实例从创建到销毁的过程，就是生命周期。
从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。
created（酷re贴）： 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来
mounted（猫贴s）：完成模板中的html渲染到html页面中。此过程中进行ajax交互
scoped（s扣）：.css只在当前组件起作用
生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。

                                  2.v-if 和 v-show 区别
答：v-if按照条件是否渲染，v-show是display的block或none；
3.$route和$router（撸特）的区别
答：$route是“路由信息对象”，包括path（怕），params（牌淋s）参数，hash（哈su），query（kwi里）查询，fullPath，matched，name等路由信息参数。
而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。

                                 4.vue.js的两个核心是什么？
答：数据驱动、组件系统

                                 6.vue常用的修饰符？
答：.prevent（扑vent）预防: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；
.self: 当事件发生在该元素本身而不是子元素的时候会触发；.capture（cup焯）: 事件侦听，事件发生的时候会调用
                              7。key的作用主要是为了高效的更新虚拟DOM。

                            9.什么是vue的计算属性？
答：在模板中放入太多的逻辑会让模板过重且难以维护，
在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。
好处：①使得数据处理结构清晰；②依赖于数据，数据更新，处理结果自动更新；③计算属性内部this指向vm实例
；④在template调用时，直接写计算属性名即可；⑤常用的是getter方法，获取数据，也可以使用set方法改变数据；
⑥相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，
不会重新计算。

                            2、在箭头函数中，this属于词法作用域，直接由上下文确定，对于普通函数中指向不定的this
，箭头函数中处理this无疑更加简单，如下：
axios（a si 啊si）recourse（re call s）

                          10.Vue 中给 data 中的对象属性添加一个新的属性时会发生什么，如何解决？
\$set()方法相当于手动的去把 obj.b 处理成一个响应式的属性，此时视图也会跟着改变了：
                  
                           1.什么是软件工程化思想
关注的是性能、稳定性、可用性、可维护性等方面。注重基本的开发效率。运行效率的同事，
思考维护效率。一切以这些为目标的工作都是工程化项目。

                           2.模块化	
主要指js.css看不见的方面。比如写一个封装号的全局axios。哪里需要直接引入，减小代码
提高复用性。

                           3.组件化
一般指可视化的区域。把首页公用的组件全部提取出来作为一个组件，有需要的时候就引用，
没需要的时候就不引用，非常灵活

                          4.谈谈This对象的理解。

this是js的一个关键字，随着函数使用场合不同，this的值会发生变化。

但是总有一个原则，那就是this指的是调用函数的那个对象。
this一般情况下：是全局对象Global。 作为方法调用，那么this就是指这个对象

                           1. 谈谈你对MVVM开发模式的理解
MVVM分为Model、View、ViewModel三者。
Model 代表数据模型，数据和业务逻辑都在Model层中定义；

View 代表UI视图，负责数据的展示；
ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；
Model 和 View 并无直接关联，
而是通过 ViewModel 来进行联系的，Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中的数据改变时会触发 View 层的刷新，
View 中由于用户交互操作而改变的数据也会在 Model 中同步。
这种模式实现了 Model 和 View 的数据自动同步，
因此开发者只需要专注对数据的维护操作即可，而不需要自己操作 dom。

                           1.MVVM是前端视图层的分层开发思想，主要把每个页面
分成了M.V和VM 其中VM是MVVM思想的核心，引文VM是M和V之间的调度者
M数据模型：保存每个页面中单独的数据
V数据展示：就是每个页面中HTML展示
VM负责监听V和M=》控制视图的更新：它就是一个调度者，分割了M和V
每当V层想要获取后保存数据的时候，都要由VM做中间处理
注意model和view没有直接的关系！

前端页面中使用MVVM的思想，主要是为了让我们开发更加方便
因为提供了数据的双向绑定==》由VM提供的

2.MVC的思想：一句话描述就是Controller（肯抽娜）负责将Model的数据
用View显示出来
Controller：职能单一，只负责处理逻辑，不负责数据的增读删更新，
如果涉及CRUD，调用Model
MVC框架有哪些：比如Struts，spring。


定义路由的时候可以配置 meta 字段：官方文档有说明

3、vue-router有哪几种导航钩子？    
答：三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件

七、vue路由的钩子函数
首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。

beforeEach主要有3个参数to，from，next：

to：route即将进入的目标路由对象，

from：route当前导航正要离开的路由

next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。

4.vue.js的两个核心是什么？
答：数据驱动、组件系统

  beforeRouteEnter (to, from, next) {
    // 在路由独享守卫后调用 不！能！获取组件实例 `this`，组件实例还没被创建
  },
  beforeRouteUpdate (to, from, next) {
    // 在当前路由改变，但是该组件被复用时调用 可以访问组件实例 `this`
    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
  },
  beforeRouteLeave (to, from, next) {
    // 导航离开该组件的对应路由时调用，可以访问组件实例 `this`


































